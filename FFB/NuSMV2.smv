
MODULE _VARS
	VAR
		V_AusfallSecured : {L_Nein, L_Ja};
		V_AusfallBremse : {L_Nein, L_Ja};
		V_AusfallHodometer : {L_Nein, L_Ja};
		V_AusfallMotor : {L_Nein, L_Ja};
		V_AusfallSchrankeGeschlossen : {L_Nein, L_Ja};
		V_AusfallZugFunkModul : {L_Nein, L_Ja};
		V_AusfallZugSensor : {L_Nein, L_Ja};
		V_BahnFunkModul : {L_Bereit, L_Senden, L_SendenAbgeschlossen, L_Empfangen, L_EmpfangenAbgeschlossen};
		V_FunkKanal : {L_KeinFunk, L_ZugZuBahnuebergang, L_BahnuebergangZuZug};
		V_ZugFunkModul : {L_Bereit, L_Senden, L_SendenAbgeschlossen, L_Empfangen, L_EmpfangenAbgeschlossen};
		V_BahnUebergangsSteuerung : {L_Bereit, L_Sichern, L_Bestaetigen, L_Warten, L_Entsichern};
		V_BahnUebergang : {L_Gesichert, L_Ungesichert};
		V_winkel : 0..90;
		V_SchrankenMotor : {L_Aus, L_Oeffnen, L_Schliessen};
		V_SchrankeGeschlossenSensor : {L_SchrankeNichtGeschlossen, L_SchrankeGeschlossen};
		V_SchrankeOffenSensor : {L_SchrankeOffen, L_SchrankeNichtOffen};
		V_ZugSensor : {L_Bereit, L_ZugPassiert};
		V_wartezeit : 0..70;
		V_maxWartezeit : {70};
		V_Bremse : {L_Aus, L_An};
		V_diskreteGeschwindigkeit : 0..45;
		V_bremskraft : {-5, 0};
		V_ZugSteuerung : {L_Bereit, L_Einschalten, L_Anfragen, L_Zwangsbremsung, L_Eingeschaltet, L_Angefragt, L_UebergangGesichert};
		V_Einheiten : {L_Einheiten};
		V_geschwindigkeit : 0..45;
		V_position : 0..2000;
		V_winkelgeschwindigkeit : {-10, 0, 10};
		V_c : {6};
		V_t : {9};
		V_gp : {1900};
		V_a : {5};
		V_z : {200};
		V_maxGeschwindigkeit : {45};
		V_maxPosition : {2000};
		V_diskretePosition : 0..2000;
		V_sp : {1940};
		V_maxWinkelgeschwindigkeit : {10};
		V_Hodometer : {L_Hodometer};
		V_SchrankenBaum : {L_Schranke};
		V_Zug : {L_Zug};
	TRANS
		next(V_maxWartezeit) = V_maxWartezeit & next(V_c) = V_c & next(V_t) = V_t & next(V_gp) = V_gp & next(V_a) = V_a & next(V_z) = V_z & next(V_sp) = V_sp & next(V_maxWinkelgeschwindigkeit) = V_maxWinkelgeschwindigkeit;
MODULE _P_AusfallSecured(v)
	INIT
		(v.V_AusfallSecured = L_Nein) & (TRUE)
	TRANS
		 ( v.V_AusfallSecured = L_Nein & next(v.V_AusfallSecured) = L_Ja & TRUE & (TRUE))  |
		 ( v.V_AusfallSecured = L_Nein & next(v.V_AusfallSecured) = L_Nein & TRUE & (TRUE))  |
		 ( v.V_AusfallSecured = L_Ja & next(v.V_AusfallSecured) = L_Ja & TRUE & (TRUE));
MODULE _P_AusfallBremse(v)
	INIT
		(v.V_AusfallBremse = L_Nein) & (TRUE)
	TRANS
		 ( v.V_AusfallBremse = L_Nein & next(v.V_AusfallBremse) = L_Ja & TRUE & (TRUE))  |
		 ( v.V_AusfallBremse = L_Nein & next(v.V_AusfallBremse) = L_Nein & TRUE & (TRUE))  |
		 ( v.V_AusfallBremse = L_Ja & next(v.V_AusfallBremse) = L_Ja & TRUE & (TRUE));
MODULE _P_AusfallHodometer(v)
	INIT
		(v.V_AusfallHodometer = L_Nein) & (TRUE)
	TRANS
		 ( v.V_AusfallHodometer = L_Nein & next(v.V_AusfallHodometer) = L_Ja & TRUE & (TRUE))  |
		 ( v.V_AusfallHodometer = L_Nein & next(v.V_AusfallHodometer) = L_Nein & TRUE & (TRUE))  |
		 ( v.V_AusfallHodometer = L_Ja & next(v.V_AusfallHodometer) = L_Ja & TRUE & (TRUE))  |
		 ( v.V_AusfallHodometer = L_Ja & next(v.V_AusfallHodometer) = L_Nein & TRUE & (TRUE));
MODULE _P_AusfallMotor(v)
	INIT
		(v.V_AusfallMotor = L_Nein) & (TRUE)
	TRANS
		 ( v.V_AusfallMotor = L_Nein & next(v.V_AusfallMotor) = L_Ja & TRUE & (TRUE))  |
		 ( v.V_AusfallMotor = L_Nein & next(v.V_AusfallMotor) = L_Nein & TRUE & (TRUE))  |
		 ( v.V_AusfallMotor = L_Ja & next(v.V_AusfallMotor) = L_Ja & TRUE & (TRUE));
MODULE _P_AusfallSchrankeGeschlossen(v)
	INIT
		(v.V_AusfallSchrankeGeschlossen = L_Nein) & (TRUE)
	TRANS
		 ( v.V_AusfallSchrankeGeschlossen = L_Nein & next(v.V_AusfallSchrankeGeschlossen) = L_Ja & TRUE & (TRUE))  |
		 ( v.V_AusfallSchrankeGeschlossen = L_Nein & next(v.V_AusfallSchrankeGeschlossen) = L_Nein & TRUE & (TRUE))  |
		 ( v.V_AusfallSchrankeGeschlossen = L_Ja & next(v.V_AusfallSchrankeGeschlossen) = L_Ja & TRUE & (TRUE));
MODULE _P_AusfallZugFunkModul(v)
	INIT
		(v.V_AusfallZugFunkModul = L_Nein) & (TRUE)
	TRANS
		 ( v.V_AusfallZugFunkModul = L_Nein & next(v.V_AusfallZugFunkModul) = L_Ja & TRUE & (TRUE))  |
		 ( v.V_AusfallZugFunkModul = L_Nein & next(v.V_AusfallZugFunkModul) = L_Nein & TRUE & (TRUE))  |
		 ( v.V_AusfallZugFunkModul = L_Ja & next(v.V_AusfallZugFunkModul) = L_Nein & TRUE & (TRUE))  |
		 ( v.V_AusfallZugFunkModul = L_Ja & next(v.V_AusfallZugFunkModul) = L_Ja & TRUE & (TRUE));
MODULE _P_AusfallZugSensor(v)
	INIT
		(v.V_AusfallZugSensor = L_Nein) & (TRUE)
	TRANS
		 ( v.V_AusfallZugSensor = L_Nein & next(v.V_AusfallZugSensor) = L_Ja & TRUE & (TRUE))  |
		 ( v.V_AusfallZugSensor = L_Nein & next(v.V_AusfallZugSensor) = L_Nein & TRUE & (TRUE))  |
		 ( v.V_AusfallZugSensor = L_Ja & next(v.V_AusfallZugSensor) = L_Ja & TRUE & (TRUE));
MODULE _P_BahnFunkModul(v)
	INIT
		(v.V_BahnFunkModul = L_Bereit) & (TRUE)
	TRANS
		 ( v.V_BahnFunkModul = L_Bereit & next(v.V_BahnFunkModul) = L_Senden & (v.V_BahnUebergangsSteuerung = L_Bestaetigen) & (TRUE))  |
		 ( v.V_BahnFunkModul = L_Bereit & next(v.V_BahnFunkModul) = L_Empfangen & (v.V_FunkKanal = L_ZugZuBahnuebergang) & (TRUE))  |
		 ( v.V_BahnFunkModul = L_Senden & next(v.V_BahnFunkModul) = L_SendenAbgeschlossen & TRUE & (TRUE))  |
		 ( v.V_BahnFunkModul = L_SendenAbgeschlossen & next(v.V_BahnFunkModul) = L_Bereit & TRUE & (TRUE))  |
		 ( v.V_BahnFunkModul = L_Empfangen & next(v.V_BahnFunkModul) = L_EmpfangenAbgeschlossen & (v.V_AusfallZugFunkModul = L_Nein) & (TRUE))  |
		 ( v.V_BahnFunkModul = L_Empfangen & next(v.V_BahnFunkModul) = L_Bereit & (v.V_AusfallZugFunkModul != L_Nein) & (TRUE))  |
		 ( v.V_BahnFunkModul = L_EmpfangenAbgeschlossen & next(v.V_BahnFunkModul) = L_Bereit & TRUE & (TRUE))  |
		 ( v.V_BahnFunkModul = L_Bereit & next(v.V_BahnFunkModul) = L_Bereit & (!(v.V_BahnUebergangsSteuerung = L_Bestaetigen) & !(v.V_FunkKanal = L_ZugZuBahnuebergang)) & (TRUE))  |
		 ( v.V_BahnFunkModul = L_Empfangen & next(v.V_BahnFunkModul) = L_Empfangen & (!(v.V_AusfallZugFunkModul = L_Nein) & !(v.V_AusfallZugFunkModul != L_Nein)) & (TRUE));
MODULE _P_BahnUebergang(v)
	INIT
		(v.V_BahnUebergang = L_Ungesichert) & (TRUE)
	TRANS
		 ( v.V_BahnUebergang = L_Gesichert & next(v.V_BahnUebergang) = L_Ungesichert & (v.V_winkel > 20) & (TRUE))  |
		 ( v.V_BahnUebergang = L_Ungesichert & next(v.V_BahnUebergang) = L_Gesichert & (v.V_winkel <= 20) & (TRUE))  |
		 ( v.V_BahnUebergang = L_Gesichert & next(v.V_BahnUebergang) = L_Gesichert & !(v.V_winkel > 20) & (TRUE))  |
		 ( v.V_BahnUebergang = L_Ungesichert & next(v.V_BahnUebergang) = L_Ungesichert & !(v.V_winkel <= 20) & (TRUE));
MODULE _P_BahnUebergangsSteuerung(v)
	INIT
		(v.V_BahnUebergangsSteuerung = L_Bereit) & (TRUE)
	TRANS
		 ( v.V_BahnUebergangsSteuerung = L_Bereit & next(v.V_BahnUebergangsSteuerung) = L_Sichern & ((v.V_BahnFunkModul = L_EmpfangenAbgeschlossen) & ((v.V_wartezeit >= 0) & (v.V_wartezeit <= v.V_maxWartezeit))) & (next(v.V_wartezeit) = 0))  |
		 ( v.V_BahnUebergangsSteuerung = L_Sichern & next(v.V_BahnUebergangsSteuerung) = L_Bestaetigen & (((v.V_SchrankeGeschlossenSensor = L_SchrankeGeschlossen) | (v.V_AusfallSecured != L_Nein)) & (v.V_BahnFunkModul = L_EmpfangenAbgeschlossen)) & (next(v.V_wartezeit) = v.V_wartezeit))  |
		 ( v.V_BahnUebergangsSteuerung = L_Sichern & next(v.V_BahnUebergangsSteuerung) = L_Sichern & (((((v.V_wartezeit < v.V_maxWartezeit) & (v.V_SchrankeGeschlossenSensor != L_SchrankeGeschlossen)) & (v.V_BahnFunkModul != L_EmpfangenAbgeschlossen)) & (v.V_AusfallSecured = L_Nein)) & ((v.V_wartezeit < v.V_maxWartezeit) & (v.V_wartezeit >= 0))) & (next(v.V_wartezeit) = (v.V_wartezeit + 1)))  |
		 ( v.V_BahnUebergangsSteuerung = L_Sichern & next(v.V_BahnUebergangsSteuerung) = L_Entsichern & (v.V_wartezeit = v.V_maxWartezeit) & (next(v.V_wartezeit) = v.V_wartezeit))  |
		 ( v.V_BahnUebergangsSteuerung = L_Bestaetigen & next(v.V_BahnUebergangsSteuerung) = L_Warten & (v.V_BahnFunkModul = L_SendenAbgeschlossen) & (next(v.V_wartezeit) = v.V_wartezeit))  |
		 ( v.V_BahnUebergangsSteuerung = L_Bestaetigen & next(v.V_BahnUebergangsSteuerung) = L_Bestaetigen & (((v.V_wartezeit < v.V_maxWartezeit) & (v.V_BahnFunkModul != L_SendenAbgeschlossen)) & ((v.V_wartezeit < v.V_maxWartezeit) & (v.V_wartezeit >= 0))) & (next(v.V_wartezeit) = (v.V_wartezeit + 1)))  |
		 ( v.V_BahnUebergangsSteuerung = L_Bestaetigen & next(v.V_BahnUebergangsSteuerung) = L_Entsichern & (v.V_wartezeit = v.V_maxWartezeit) & (next(v.V_wartezeit) = v.V_wartezeit))  |
		 ( v.V_BahnUebergangsSteuerung = L_Warten & next(v.V_BahnUebergangsSteuerung) = L_Entsichern & ((v.V_wartezeit = v.V_maxWartezeit) | (v.V_ZugSensor = L_ZugPassiert)) & (next(v.V_wartezeit) = v.V_wartezeit))  |
		 ( v.V_BahnUebergangsSteuerung = L_Warten & next(v.V_BahnUebergangsSteuerung) = L_Warten & (((v.V_wartezeit < v.V_maxWartezeit) & (v.V_ZugSensor != L_ZugPassiert)) & ((v.V_wartezeit < v.V_maxWartezeit) & (v.V_wartezeit >= 0))) & (next(v.V_wartezeit) = (v.V_wartezeit + 1)))  |
		 ( v.V_BahnUebergangsSteuerung = L_Entsichern & next(v.V_BahnUebergangsSteuerung) = L_Bereit & (v.V_SchrankeOffenSensor = L_SchrankeOffen) & (next(v.V_wartezeit) = v.V_wartezeit))  |
		 ( v.V_BahnUebergangsSteuerung = L_Bereit & next(v.V_BahnUebergangsSteuerung) = L_Bereit & !((v.V_BahnFunkModul = L_EmpfangenAbgeschlossen) & ((v.V_wartezeit >= 0) & (v.V_wartezeit <= v.V_maxWartezeit))) & (next(v.V_wartezeit) = v.V_wartezeit))  |
		 ( v.V_BahnUebergangsSteuerung = L_Sichern & next(v.V_BahnUebergangsSteuerung) = L_Sichern & (!(((v.V_SchrankeGeschlossenSensor = L_SchrankeGeschlossen) | (v.V_AusfallSecured != L_Nein)) & (v.V_BahnFunkModul = L_EmpfangenAbgeschlossen)) & (!(((((v.V_wartezeit < v.V_maxWartezeit) & (v.V_SchrankeGeschlossenSensor != L_SchrankeGeschlossen)) & (v.V_BahnFunkModul != L_EmpfangenAbgeschlossen)) & (v.V_AusfallSecured = L_Nein)) & ((v.V_wartezeit < v.V_maxWartezeit) & (v.V_wartezeit >= 0))) & !(v.V_wartezeit = v.V_maxWartezeit))) & (next(v.V_wartezeit) = v.V_wartezeit))  |
		 ( v.V_BahnUebergangsSteuerung = L_Bestaetigen & next(v.V_BahnUebergangsSteuerung) = L_Bestaetigen & (!(v.V_BahnFunkModul = L_SendenAbgeschlossen) & (!(((v.V_wartezeit < v.V_maxWartezeit) & (v.V_BahnFunkModul != L_SendenAbgeschlossen)) & ((v.V_wartezeit < v.V_maxWartezeit) & (v.V_wartezeit >= 0))) & !(v.V_wartezeit = v.V_maxWartezeit))) & (next(v.V_wartezeit) = v.V_wartezeit))  |
		 ( v.V_BahnUebergangsSteuerung = L_Warten & next(v.V_BahnUebergangsSteuerung) = L_Warten & (!((v.V_wartezeit = v.V_maxWartezeit) | (v.V_ZugSensor = L_ZugPassiert)) & !(((v.V_wartezeit < v.V_maxWartezeit) & (v.V_ZugSensor != L_ZugPassiert)) & ((v.V_wartezeit < v.V_maxWartezeit) & (v.V_wartezeit >= 0)))) & (next(v.V_wartezeit) = v.V_wartezeit))  |
		 ( v.V_BahnUebergangsSteuerung = L_Entsichern & next(v.V_BahnUebergangsSteuerung) = L_Entsichern & !(v.V_SchrankeOffenSensor = L_SchrankeOffen) & (next(v.V_wartezeit) = v.V_wartezeit));
MODULE _P_Bremse(v)
	INIT
		(v.V_Bremse = L_Aus) & ((v.V_bremskraft = 0))
	TRANS
		 ( v.V_Bremse = L_Aus & next(v.V_Bremse) = L_An & (((v.V_ZugSteuerung = L_Zwangsbremsung) & (v.V_AusfallBremse = L_Nein)) & (v.V_bremskraft = 0)) & (next(v.V_bremskraft) = -5))  |
		 ( v.V_Bremse = L_An & next(v.V_Bremse) = L_Aus & ((((v.V_ZugSteuerung != L_Zwangsbremsung) | (v.V_diskreteGeschwindigkeit = 0)) | (v.V_AusfallBremse != L_Nein)) & (v.V_bremskraft = 1)) & (next(v.V_bremskraft) = 0))  |
		 ( v.V_Bremse = L_Aus & next(v.V_Bremse) = L_Aus & !(((v.V_ZugSteuerung = L_Zwangsbremsung) & (v.V_AusfallBremse = L_Nein)) & (v.V_bremskraft = 0)) & (next(v.V_bremskraft) = v.V_bremskraft))  |
		 ( v.V_Bremse = L_An & next(v.V_Bremse) = L_An & !((((v.V_ZugSteuerung != L_Zwangsbremsung) | (v.V_diskreteGeschwindigkeit = 0)) | (v.V_AusfallBremse != L_Nein)) & (v.V_bremskraft = 1)) & (next(v.V_bremskraft) = v.V_bremskraft));
MODULE _P_Einheiten(v)
	INIT
		(v.V_Einheiten = L_Einheiten) & (TRUE)
	TRANS
		 ( v.V_Einheiten = L_Einheiten & next(v.V_Einheiten) = L_Einheiten & TRUE & (TRUE));
MODULE _P_FunkKanal(v)
	INIT
		(v.V_FunkKanal = L_KeinFunk) & (TRUE)
	TRANS
		 ( v.V_FunkKanal = L_KeinFunk & next(v.V_FunkKanal) = L_ZugZuBahnuebergang & (v.V_ZugFunkModul = L_Senden) & (TRUE))  |
		 ( v.V_FunkKanal = L_KeinFunk & next(v.V_FunkKanal) = L_BahnuebergangZuZug & (v.V_BahnFunkModul = L_Senden) & (TRUE))  |
		 ( v.V_FunkKanal = L_ZugZuBahnuebergang & next(v.V_FunkKanal) = L_KeinFunk & (v.V_ZugFunkModul != L_Senden) & (TRUE))  |
		 ( v.V_FunkKanal = L_BahnuebergangZuZug & next(v.V_FunkKanal) = L_KeinFunk & (v.V_BahnFunkModul != L_Senden) & (TRUE))  |
		 ( v.V_FunkKanal = L_KeinFunk & next(v.V_FunkKanal) = L_KeinFunk & (!(v.V_ZugFunkModul = L_Senden) & !(v.V_BahnFunkModul = L_Senden)) & (TRUE))  |
		 ( v.V_FunkKanal = L_ZugZuBahnuebergang & next(v.V_FunkKanal) = L_ZugZuBahnuebergang & !(v.V_ZugFunkModul != L_Senden) & (TRUE))  |
		 ( v.V_FunkKanal = L_BahnuebergangZuZug & next(v.V_FunkKanal) = L_BahnuebergangZuZug & !(v.V_BahnFunkModul != L_Senden) & (TRUE));
MODULE _P_Hodometer(v)
	INIT
		(v.V_Hodometer = L_Hodometer) & (((v.V_diskreteGeschwindigkeit = 45) & (v.V_diskretePosition = 0)))
	TRANS
		 ( v.V_Hodometer = L_Hodometer & next(v.V_Hodometer) = L_Hodometer & ((v.V_AusfallHodometer = L_Nein) & (((v.V_geschwindigkeit >= 0) & (v.V_geschwindigkeit <= 45)) & ((v.V_position >= 0) & (v.V_position <= 3060)))) & (next(v.V_diskretePosition) = v.V_position & next(v.V_diskreteGeschwindigkeit) = v.V_geschwindigkeit))  |
		 ( v.V_Hodometer = L_Hodometer & next(v.V_Hodometer) = L_Hodometer & ((v.V_AusfallHodometer != L_Nein) & (((v.V_geschwindigkeit >= 0) & (v.V_geschwindigkeit <= 45)) & ((v.V_position >= 100) & (v.V_position <= 3060)))) & (next(v.V_diskretePosition) = 0 & next(v.V_diskreteGeschwindigkeit) = v.V_geschwindigkeit))  |
		 ( v.V_Hodometer = L_Hodometer & next(v.V_Hodometer) = L_Hodometer & (!((v.V_AusfallHodometer = L_Nein) & (((v.V_geschwindigkeit >= 0) & (v.V_geschwindigkeit <= 45)) & ((v.V_position >= 0) & (v.V_position <= 3060)))) & !((v.V_AusfallHodometer != L_Nein) & (((v.V_geschwindigkeit >= 0) & (v.V_geschwindigkeit <= 45)) & ((v.V_position >= 100) & (v.V_position <= 3060))))) & (next(v.V_diskreteGeschwindigkeit) = v.V_diskreteGeschwindigkeit & next(v.V_diskretePosition) = v.V_diskretePosition));
MODULE _P_SchrankeGeschlossenSensor(v)
	INIT
		(v.V_SchrankeGeschlossenSensor = L_SchrankeNichtGeschlossen) & (TRUE)
	TRANS
		 ( v.V_SchrankeGeschlossenSensor = L_SchrankeNichtGeschlossen & next(v.V_SchrankeGeschlossenSensor) = L_SchrankeGeschlossen & ((v.V_winkel <= (2 * v.V_maxWinkelgeschwindigkeit)) | (v.V_AusfallSchrankeGeschlossen != L_Nein)) & (TRUE))  |
		 ( v.V_SchrankeGeschlossenSensor = L_SchrankeGeschlossen & next(v.V_SchrankeGeschlossenSensor) = L_SchrankeNichtGeschlossen & ((v.V_winkel > (2 * v.V_maxWinkelgeschwindigkeit)) & (v.V_AusfallSchrankeGeschlossen = L_Nein)) & (TRUE))  |
		 ( v.V_SchrankeGeschlossenSensor = L_SchrankeNichtGeschlossen & next(v.V_SchrankeGeschlossenSensor) = L_SchrankeNichtGeschlossen & !((v.V_winkel <= (2 * v.V_maxWinkelgeschwindigkeit)) | (v.V_AusfallSchrankeGeschlossen != L_Nein)) & (TRUE))  |
		 ( v.V_SchrankeGeschlossenSensor = L_SchrankeGeschlossen & next(v.V_SchrankeGeschlossenSensor) = L_SchrankeGeschlossen & !((v.V_winkel > (2 * v.V_maxWinkelgeschwindigkeit)) & (v.V_AusfallSchrankeGeschlossen = L_Nein)) & (TRUE));
MODULE _P_SchrankenBaum(v)
	INIT
		(v.V_SchrankenBaum = L_Schranke) & ((v.V_winkel = 90))
	TRANS
		 ( v.V_SchrankenBaum = L_Schranke & next(v.V_SchrankenBaum) = L_Schranke & (((v.V_SchrankenMotor = L_Oeffnen) | (v.V_SchrankenMotor = L_Schliessen)) & (((v.V_winkel + v.V_winkelgeschwindigkeit) >= 0) & ((v.V_winkel + v.V_winkelgeschwindigkeit) <= 90))) & (next(v.V_winkel) = (v.V_winkel + v.V_winkelgeschwindigkeit)))  |
		 ( v.V_SchrankenBaum = L_Schranke & next(v.V_SchrankenBaum) = L_Schranke & !(((v.V_SchrankenMotor = L_Oeffnen) | (v.V_SchrankenMotor = L_Schliessen)) & (((v.V_winkel + v.V_winkelgeschwindigkeit) >= 0) & ((v.V_winkel + v.V_winkelgeschwindigkeit) <= 90))) & (next(v.V_winkel) = v.V_winkel));
MODULE _P_SchrankenMotor(v)
	INIT
		(v.V_SchrankenMotor = L_Aus) & ((v.V_winkelgeschwindigkeit = 0))
	TRANS
		 ( v.V_SchrankenMotor = L_Aus & next(v.V_SchrankenMotor) = L_Oeffnen & (((v.V_BahnUebergangsSteuerung = L_Entsichern) & (v.V_SchrankeOffenSensor != L_SchrankeOffen)) & (v.V_AusfallMotor = L_Nein)) & (next(v.V_winkelgeschwindigkeit) = 10))  |
		 ( v.V_SchrankenMotor = L_Aus & next(v.V_SchrankenMotor) = L_Schliessen & (((v.V_BahnUebergangsSteuerung = L_Sichern) & (v.V_SchrankeGeschlossenSensor != L_SchrankeGeschlossen)) & (v.V_AusfallMotor = L_Nein)) & (next(v.V_winkelgeschwindigkeit) = -10))  |
		 ( v.V_SchrankenMotor = L_Oeffnen & next(v.V_SchrankenMotor) = L_Aus & ((v.V_SchrankeOffenSensor = L_SchrankeOffen) | (v.V_AusfallMotor != L_Nein)) & (next(v.V_winkelgeschwindigkeit) = 0))  |
		 ( v.V_SchrankenMotor = L_Schliessen & next(v.V_SchrankenMotor) = L_Aus & ((v.V_SchrankeGeschlossenSensor = L_SchrankeGeschlossen) | (v.V_AusfallMotor != L_Nein)) & (next(v.V_winkelgeschwindigkeit) = 0))  |
		 ( v.V_SchrankenMotor = L_Aus & next(v.V_SchrankenMotor) = L_Aus & (!(((v.V_BahnUebergangsSteuerung = L_Entsichern) & (v.V_SchrankeOffenSensor != L_SchrankeOffen)) & (v.V_AusfallMotor = L_Nein)) & !(((v.V_BahnUebergangsSteuerung = L_Sichern) & (v.V_SchrankeGeschlossenSensor != L_SchrankeGeschlossen)) & (v.V_AusfallMotor = L_Nein))) & (next(v.V_winkelgeschwindigkeit) = v.V_winkelgeschwindigkeit))  |
		 ( v.V_SchrankenMotor = L_Oeffnen & next(v.V_SchrankenMotor) = L_Oeffnen & !((v.V_SchrankeOffenSensor = L_SchrankeOffen) | (v.V_AusfallMotor != L_Nein)) & (next(v.V_winkelgeschwindigkeit) = v.V_winkelgeschwindigkeit))  |
		 ( v.V_SchrankenMotor = L_Schliessen & next(v.V_SchrankenMotor) = L_Schliessen & !((v.V_SchrankeGeschlossenSensor = L_SchrankeGeschlossen) | (v.V_AusfallMotor != L_Nein)) & (next(v.V_winkelgeschwindigkeit) = v.V_winkelgeschwindigkeit));
MODULE _P_SchrankeOffenSensor(v)
	INIT
		(v.V_SchrankeOffenSensor = L_SchrankeOffen) & (TRUE)
	TRANS
		 ( v.V_SchrankeOffenSensor = L_SchrankeOffen & next(v.V_SchrankeOffenSensor) = L_SchrankeNichtOffen & (v.V_winkel < (90 - (2 * v.V_maxWinkelgeschwindigkeit))) & (TRUE))  |
		 ( v.V_SchrankeOffenSensor = L_SchrankeNichtOffen & next(v.V_SchrankeOffenSensor) = L_SchrankeOffen & (v.V_winkel >= (90 - (2 * v.V_maxWinkelgeschwindigkeit))) & (TRUE))  |
		 ( v.V_SchrankeOffenSensor = L_SchrankeOffen & next(v.V_SchrankeOffenSensor) = L_SchrankeOffen & !(v.V_winkel < (90 - (2 * v.V_maxWinkelgeschwindigkeit))) & (TRUE))  |
		 ( v.V_SchrankeOffenSensor = L_SchrankeNichtOffen & next(v.V_SchrankeOffenSensor) = L_SchrankeNichtOffen & !(v.V_winkel >= (90 - (2 * v.V_maxWinkelgeschwindigkeit))) & (TRUE));
MODULE _P_Zug(v)
	INIT
		(v.V_Zug = L_Zug) & (((v.V_geschwindigkeit = v.V_maxGeschwindigkeit) & (v.V_position = 0)))
	TRANS
		 ( v.V_Zug = L_Zug & next(v.V_Zug) = L_Zug & ((((v.V_geschwindigkeit + v.V_bremskraft) >= 0) & ((v.V_geschwindigkeit + v.V_bremskraft) <= 45)) & (((v.V_position + v.V_geschwindigkeit) >= 0) & ((v.V_position + v.V_geschwindigkeit) <= 2000))) & (next(v.V_position) = (v.V_position + v.V_geschwindigkeit) & next(v.V_geschwindigkeit) = (v.V_geschwindigkeit + v.V_bremskraft)))  |
		 ( v.V_Zug = L_Zug & next(v.V_Zug) = L_Zug & !((((v.V_geschwindigkeit + v.V_bremskraft) >= 0) & ((v.V_geschwindigkeit + v.V_bremskraft) <= 45)) & (((v.V_position + v.V_geschwindigkeit) >= 0) & ((v.V_position + v.V_geschwindigkeit) <= 2000))) & (next(v.V_geschwindigkeit) = v.V_geschwindigkeit & next(v.V_position) = v.V_position));
MODULE _P_ZugFunkModul(v)
	INIT
		(v.V_ZugFunkModul = L_Bereit) & (TRUE)
	TRANS
		 ( v.V_ZugFunkModul = L_Bereit & next(v.V_ZugFunkModul) = L_Senden & ((v.V_ZugSteuerung = L_Einschalten) | (v.V_ZugSteuerung = L_Anfragen)) & (TRUE))  |
		 ( v.V_ZugFunkModul = L_Bereit & next(v.V_ZugFunkModul) = L_Empfangen & (v.V_FunkKanal = L_BahnuebergangZuZug) & (TRUE))  |
		 ( v.V_ZugFunkModul = L_Senden & next(v.V_ZugFunkModul) = L_SendenAbgeschlossen & (v.V_AusfallZugFunkModul = L_Nein) & (TRUE))  |
		 ( v.V_ZugFunkModul = L_Senden & next(v.V_ZugFunkModul) = L_Bereit & (v.V_AusfallZugFunkModul != L_Nein) & (TRUE))  |
		 ( v.V_ZugFunkModul = L_SendenAbgeschlossen & next(v.V_ZugFunkModul) = L_Bereit & TRUE & (TRUE))  |
		 ( v.V_ZugFunkModul = L_Empfangen & next(v.V_ZugFunkModul) = L_EmpfangenAbgeschlossen & (v.V_AusfallZugFunkModul = L_Nein) & (TRUE))  |
		 ( v.V_ZugFunkModul = L_Empfangen & next(v.V_ZugFunkModul) = L_Bereit & (v.V_AusfallZugFunkModul != L_Nein) & (TRUE))  |
		 ( v.V_ZugFunkModul = L_EmpfangenAbgeschlossen & next(v.V_ZugFunkModul) = L_Bereit & TRUE & (TRUE))  |
		 ( v.V_ZugFunkModul = L_Bereit & next(v.V_ZugFunkModul) = L_Bereit & (!((v.V_ZugSteuerung = L_Einschalten) | (v.V_ZugSteuerung = L_Anfragen)) & !(v.V_FunkKanal = L_BahnuebergangZuZug)) & (TRUE))  |
		 ( v.V_ZugFunkModul = L_Senden & next(v.V_ZugFunkModul) = L_Senden & (!(v.V_AusfallZugFunkModul = L_Nein) & !(v.V_AusfallZugFunkModul != L_Nein)) & (TRUE))  |
		 ( v.V_ZugFunkModul = L_Empfangen & next(v.V_ZugFunkModul) = L_Empfangen & (!(v.V_AusfallZugFunkModul = L_Nein) & !(v.V_AusfallZugFunkModul != L_Nein)) & (TRUE));
MODULE _P_ZugSensor(v)
	INIT
		(v.V_ZugSensor = L_Bereit) & (TRUE)
	TRANS
		 ( v.V_ZugSensor = L_Bereit & next(v.V_ZugSensor) = L_ZugPassiert & ((v.V_position >= v.V_sp) | (v.V_AusfallZugSensor != L_Nein)) & (TRUE))  |
		 ( v.V_ZugSensor = L_Bereit & next(v.V_ZugSensor) = L_Bereit & !((v.V_position >= v.V_sp) | (v.V_AusfallZugSensor != L_Nein)) & (TRUE))  |
		 ( v.V_ZugSensor = L_ZugPassiert & next(v.V_ZugSensor) = L_ZugPassiert & TRUE & (TRUE));
MODULE _P_ZugSteuerung(v)
	INIT
		(v.V_ZugSteuerung = L_Bereit) & (TRUE)
	TRANS
		 ( v.V_ZugSteuerung = L_Bereit & next(v.V_ZugSteuerung) = L_Einschalten & (v.V_diskretePosition >= ((((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a))) - ((2 * v.V_c) * v.V_diskreteGeschwindigkeit)) - (v.V_diskreteGeschwindigkeit * (v.V_t + v.V_c)))) & (TRUE))  |
		 ( v.V_ZugSteuerung = L_Einschalten & next(v.V_ZugSteuerung) = L_Eingeschaltet & ((v.V_ZugFunkModul = L_SendenAbgeschlossen) & (v.V_diskretePosition < ((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a))))) & (TRUE))  |
		 ( v.V_ZugSteuerung = L_Einschalten & next(v.V_ZugSteuerung) = L_Zwangsbremsung & (v.V_diskretePosition >= ((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a)))) & (TRUE))  |
		 ( v.V_ZugSteuerung = L_Anfragen & next(v.V_ZugSteuerung) = L_Angefragt & ((v.V_ZugFunkModul = L_SendenAbgeschlossen) & (v.V_diskretePosition < ((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a))))) & (TRUE))  |
		 ( v.V_ZugSteuerung = L_Anfragen & next(v.V_ZugSteuerung) = L_Zwangsbremsung & (v.V_diskretePosition >= ((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a)))) & (TRUE))  |
		 ( v.V_ZugSteuerung = L_Eingeschaltet & next(v.V_ZugSteuerung) = L_Anfragen & ((v.V_diskretePosition >= (((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a))) - ((2 * v.V_c) * v.V_diskreteGeschwindigkeit))) & (v.V_diskretePosition < ((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a))))) & (TRUE))  |
		 ( v.V_ZugSteuerung = L_Eingeschaltet & next(v.V_ZugSteuerung) = L_Zwangsbremsung & (v.V_diskretePosition >= ((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a)))) & (TRUE))  |
		 ( v.V_ZugSteuerung = L_Angefragt & next(v.V_ZugSteuerung) = L_Zwangsbremsung & (v.V_diskretePosition >= ((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a)))) & (TRUE))  |
		 ( v.V_ZugSteuerung = L_Angefragt & next(v.V_ZugSteuerung) = L_UebergangGesichert & ((v.V_ZugFunkModul = L_EmpfangenAbgeschlossen) & (v.V_diskretePosition < ((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a))))) & (TRUE))  |
		 ( v.V_ZugSteuerung = L_Bereit & next(v.V_ZugSteuerung) = L_Bereit & !(v.V_diskretePosition >= ((((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a))) - ((2 * v.V_c) * v.V_diskreteGeschwindigkeit)) - (v.V_diskreteGeschwindigkeit * (v.V_t + v.V_c)))) & (TRUE))  |
		 ( v.V_ZugSteuerung = L_Einschalten & next(v.V_ZugSteuerung) = L_Einschalten & (!((v.V_ZugFunkModul = L_SendenAbgeschlossen) & (v.V_diskretePosition < ((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a))))) & !(v.V_diskretePosition >= ((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a))))) & (TRUE))  |
		 ( v.V_ZugSteuerung = L_Anfragen & next(v.V_ZugSteuerung) = L_Anfragen & (!((v.V_ZugFunkModul = L_SendenAbgeschlossen) & (v.V_diskretePosition < ((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a))))) & !(v.V_diskretePosition >= ((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a))))) & (TRUE))  |
		 ( v.V_ZugSteuerung = L_Zwangsbremsung & next(v.V_ZugSteuerung) = L_Zwangsbremsung & TRUE & (TRUE))  |
		 ( v.V_ZugSteuerung = L_Eingeschaltet & next(v.V_ZugSteuerung) = L_Eingeschaltet & (!((v.V_diskretePosition >= (((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a))) - ((2 * v.V_c) * v.V_diskreteGeschwindigkeit))) & (v.V_diskretePosition < ((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a))))) & !(v.V_diskretePosition >= ((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a))))) & (TRUE))  |
		 ( v.V_ZugSteuerung = L_Angefragt & next(v.V_ZugSteuerung) = L_Angefragt & (!(v.V_diskretePosition >= ((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a)))) & !((v.V_ZugFunkModul = L_EmpfangenAbgeschlossen) & (v.V_diskretePosition < ((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a)))))) & (TRUE))  |
		 ( v.V_ZugSteuerung = L_UebergangGesichert & next(v.V_ZugSteuerung) = L_UebergangGesichert & TRUE & (TRUE));
MODULE main
	VAR
		v : _VARS();
		p_AusfallSecured : _P_AusfallSecured(v);
		p_AusfallBremse : _P_AusfallBremse(v);
		p_AusfallHodometer : _P_AusfallHodometer(v);
		p_AusfallMotor : _P_AusfallMotor(v);
		p_AusfallSchrankeGeschlossen : _P_AusfallSchrankeGeschlossen(v);
		p_AusfallZugFunkModul : _P_AusfallZugFunkModul(v);
		p_AusfallZugSensor : _P_AusfallZugSensor(v);
		p_BahnFunkModul : _P_BahnFunkModul(v);
		p_BahnUebergang : _P_BahnUebergang(v);
		p_BahnUebergangsSteuerung : _P_BahnUebergangsSteuerung(v);
		p_Bremse : _P_Bremse(v);
		p_Einheiten : _P_Einheiten(v);
		p_FunkKanal : _P_FunkKanal(v);
		p_Hodometer : _P_Hodometer(v);
		p_SchrankeGeschlossenSensor : _P_SchrankeGeschlossenSensor(v);
		p_SchrankenBaum : _P_SchrankenBaum(v);
		p_SchrankenMotor : _P_SchrankenMotor(v);
		p_SchrankeOffenSensor : _P_SchrankeOffenSensor(v);
		p_Zug : _P_Zug(v);
		p_ZugFunkModul : _P_ZugFunkModul(v);
		p_ZugSensor : _P_ZugSensor(v);
		p_ZugSteuerung : _P_ZugSteuerung(v);







	DEFINE
		EP := ((((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a))) - ((2 * v.V_c) * v.V_diskreteGeschwindigkeit)) - (v.V_diskreteGeschwindigkeit * (v.V_t + v.V_c)));
		AP := (((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a))) - ((2 * v.V_c) * v.V_diskreteGeschwindigkeit));
		BEP:= ((v.V_gp - v.V_z) - ((v.V_diskreteGeschwindigkeit * v.V_diskreteGeschwindigkeit) / (2 * v.V_a)));
		GP := v.V_gp;
		SP := v.V_sp;
		
		Hazard := (v.V_position >= GP & v.V_position < SP & v.V_BahnUebergang !=L_Gesichert );
		
		noFaults := v.V_AusfallSecured = L_Nein & v.V_AusfallBremse = L_Nein & v.V_AusfallHodometer = L_Nein & 
		v.V_AusfallMotor = L_Nein & v.V_AusfallSchrankeGeschlossen = L_Nein & v.V_AusfallZugFunkModul = L_Nein
		& v.V_AusfallZugSensor = L_Nein ;

		
-- Aufgabe 8

--1- Geschwindigkeit des Zuges ??steigt nie 160 km/h bzw. 45 m/s
LTLSPEC G(noFaults) -> G(v.V_diskreteGeschwindigkeit <= 45)

--2- Hodometer misst immer Position und Geschwindigkeit des Zugs
LTLSPEC G(noFaults) -> G(next(v.V_diskretePosition) = v.V_position & next(v.V_diskreteGeschwindigkeit) = v.V_geschwindigkeit)

--3- Zugsensor misst immer, ob Zug an SP ist
LTLSPEC G(noFaults) -> G((v.V_position >= v.V_sp -> v.V_ZugSensor = L_ZugPassiert) | (v.V_position < v.V_sp -> v.V_ZugSensor = L_Bereit))

--4- wenn EP erreicht wird, wird eine Nachricht an die Bahn??gangssteuerung vor AP gesendet
LTLSPEC G(noFaults) -> (F(v.V_position < AP) -> (((v.V_position >= EP & v.V_ZugSteuerung = L_Bereit)->(!(v.V_position < AP)U((v.V_ZugFunkModul = L_SendenAbgeschlossen) & !(v.V_position < AP))))U(v.V_position < AP)))

--5- wenn Bahn??gangssteuerung im Zustand "Bereit" eine Nachricht erh? wird der Bahn??gang gesichert
LTLSPEC G(noFaults) -> G((v.V_BahnUebergangsSteuerung = L_Bereit & v.V_BahnFunkModul = L_EmpfangenAbgeschlossen) -> F(v.V_BahnUebergang = L_Gesichert))

--6- : Bahn??gang ist nur gesichert, wenn Schranke geschlossen ist
LTLSPEC G(noFaults) -> G(v.V_BahnUebergang = L_Gesichert -> (v.V_winkel <= 30 ))

--7- Zug bremst zwischen EP und BEP nicht
LTLSPEC G(noFaults) -> G((v.V_position >= EP & v.V_position < BEP) -> v.V_Bremse = L_Aus)


--8- GP nur erreicht wenn BahnUebergang gesichert ist (HAZARD) --
LTLSPEC G(noFaults) -> G((v.V_position >= GP & v.V_position < SP) -> v.V_BahnUebergang = L_Gesichert )

--9- Die Einschaltpunkt und Anfragepunkt werden erreicht
LTLSPEC G(noFaults) -> (F(v.V_diskretePosition >= EP) & F(v.V_diskretePosition >= AP))


--10- FALSE: Bahn??gang w?end Zug zwischen EP und AP kann gesichert werden
-- CTLSPEC AG((v.V_position >= EP  & v.V_position < AP) -> EF(v.V_BahnUebergang = L_Gesichert & v.V_position < AP))

--11- Wenn der Zug best?gt wird nach Anfrage Punkt vor BEP, ist der Bahn??gang gesichert
LTLSPEC G(noFaults) -> G((v.V_position >= AP & v.V_position < BEP & v.V_ZugSteuerung = L_UebergangGesichert) -> v.V_BahnUebergang = L_Gesichert)

--12- : Schranken bleiben nicht geschlossen
LTLSPEC G(noFaults) -> G(v.V_winkel = 0 -> F(v.V_winkel = 90) )


--13- : Wenn BEP erreicht und Bahn??gang bevor Zug SP erreicht nicht gesichert dann bremsen
LTLSPEC G(noFaults) -> G((v.V_diskretePosition >= BEP & v.V_diskretePosition < SP & v.V_BahnUebergang = L_Ungesichert ) -> X(v.V_ZugSteuerung = L_Zwangsbremsung))

--14- GP wird nicht erreicht nach Zwangsbremsung
LTLSPEC G(noFaults) -> (v.V_ZugSteuerung = L_Zwangsbremsung -> G(!(v.V_position >= GP) ) )


--15- Wenn die Bremse nie aktiviert wird passiert der Zug irgendwann den Bahnuebergang
LTLSPEC G(noFaults) -> (G(v.V_Bremse = L_Aus) -> F(v.V_position >= v.V_sp))

--16- Wenn die Bremse irgendwann aktiviert wird erreicht der Zug nie den Gefahrenpunkt:
LTLSPEC G(noFaults) -> ( (F(v.V_Bremse = L_An)) -> G!(v.V_position >= GP) )

--17- Wenn der Bahnuebergang nie gesichert wird erreicht der Zug nie den GP:
LTLSPEC G(noFaults) -> (G(v.V_BahnUebergang = L_Ungesichert) -> G(v.V_position < GP) )

--18- Wenn die Bremse aktiviert wird h? der Zug in einem spaeteren Schritt an:
LTLSPEC G(noFaults) -> G(v.V_Bremse = L_An -> F(v.V_geschwindigkeit = 0))

--19- Wenn die Bahnuebergangssteuerung von Bereit zu sichern wechselt, wird der Schrankenmotor im n?sten Schritt aktiviert
LTLSPEC G(noFaults) -> G(v.V_BahnUebergangsSteuerung = L_Bereit & X(v.V_BahnUebergangsSteuerung = L_Sichern) -> X(v.V_SchrankenMotor = L_Aus & X(v.V_SchrankenMotor = L_Schliessen)))

-- Aufgabe 9

LTLSPEC  !(noFaults U (Hazard))

-- V.V_AusfallSecured
LTLSPEC !( (v.V_AusfallBremse = L_Nein & v.V_AusfallHodometer = L_Nein & 
		v.V_AusfallMotor = L_Nein & v.V_AusfallSchrankeGeschlossen = L_Nein & v.V_AusfallZugFunkModul = L_Nein
		& v.V_AusfallZugSensor = L_Nein ) U (Hazard))
		

-- V.V_AusfallBremse
LTLSPEC !( (v.V_AusfallSecured = L_Nein  & v.V_AusfallHodometer = L_Nein & 
		v.V_AusfallMotor = L_Nein & v.V_AusfallSchrankeGeschlossen = L_Nein & v.V_AusfallZugFunkModul = L_Nein
		& v.V_AusfallZugSensor = L_Nein ) U (Hazard))

-- V.V_AusfallMotor

LTLSPEC !( (v.V_AusfallSecured = L_Nein & v.V_AusfallBremse = L_Nein & v.V_AusfallHodometer = L_Nein & 
		 v.V_AusfallSchrankeGeschlossen = L_Nein & v.V_AusfallZugFunkModul = L_Nein
		& v.V_AusfallZugSensor = L_Nein ) U (Hazard))

-- V.V_AusfallZugFunModul

LTLSPEC !( (v.V_AusfallSecured = L_Nein & v.V_AusfallBremse = L_Nein & v.V_AusfallHodometer = L_Nein & 
		v.V_AusfallMotor = L_Nein & v.V_AusfallSchrankeGeschlossen = L_Nein 
		& v.V_AusfallZugSensor = L_Nein ) U (Hazard))


-- V.V_AusfallZugFunModul & V_AusfallMotor
LTLSPEC !( ( v.V_AusfallBremse = L_Nein & v.V_AusfallHodometer = L_Nein & 
		v.V_AusfallMotor = L_Nein & v.V_AusfallSchrankeGeschlossen = L_Nein 
		& v.V_AusfallZugSensor = L_Nein ) U (Hazard))
		
-- Bremse ist mit den anderen nicht kritischen Ausf?lle kombiniren (au?er motor) f?hrt zu keinem Hazrad
-- V.V_Bremse & V_AusfallSecured
LTLSPEC !( ( v.V_AusfallHodometer = L_Nein & 
		v.V_AusfallMotor = L_Nein & v.V_AusfallSchrankeGeschlossen = L_Nein & v.V_AusfallZugFunkModul = L_Nein
		& v.V_AusfallZugSensor = L_Nein ) U (Hazard))
		
		
-- Kritische Menge (bis jetzt)

-- Single Points of Failures		
-- V.V_AusfallZugSensor
LTLSPEC !( ( v.V_AusfallSecured = L_Nein & v.V_AusfallBremse = L_Nein & v.V_AusfallHodometer = L_Nein & 
		v.V_AusfallMotor = L_Nein & v.V_AusfallSchrankeGeschlossen = L_Nein & v.V_AusfallZugFunkModul = L_Nein ) U (Hazard) )


-- V.V_SchrankeGeschlossenSensor 
LTLSPEC !( (v.V_AusfallSecured = L_Nein & v.V_AusfallBremse = L_Nein & 
		v.V_AusfallMotor = L_Nein & v.V_AusfallHodometer = L_Nein & v.V_AusfallZugFunkModul = L_Nein
		& v.V_AusfallZugSensor = L_Nein ) U (Hazard) )

-- V.V_AusfallHodometer
LTLSPEC !( (v.V_AusfallSecured = L_Nein & v.V_AusfallBremse = L_Nein & 
		v.V_AusfallMotor = L_Nein & v.V_AusfallSchrankeGeschlossen = L_Nein & v.V_AusfallZugFunkModul = L_Nein
		& v.V_AusfallZugSensor = L_Nein ) U (Hazard) )

-- V.V_Bremse & V_AusfallZugFunkModul
LTLSPEC !( ( v.V_AusfallHodometer = L_Nein & 
		v.V_AusfallMotor = L_Nein & v.V_AusfallSchrankeGeschlossen = L_Nein & v.V_AusfallSecured = L_Nein
		& v.V_AusfallZugSensor = L_Nein ) U (Hazard))
		
-- V.V_AusfallBremse & V.V_AusfallMotor 
LTLSPEC !( (v.V_AusfallSecured = L_Nein  & v.V_AusfallHodometer = L_Nein 
		& v.V_AusfallSchrankeGeschlossen = L_Nein & v.V_AusfallZugFunkModul = L_Nein
		& v.V_AusfallZugSensor = L_Nein ) U (Hazard) )
		
-- V_AusfallSecured & V_AusfallMotor
LTLSPEC !(( v.V_AusfallBremse = L_Nein & v.V_AusfallHodometer = L_Nein & 
		v.V_AusfallSchrankeGeschlossen = L_Nein & v.V_AusfallZugFunkModul = L_Nein
		& v.V_AusfallZugSensor = L_Nein ) U (Hazard) )
		
-- V_AusfallSecured & V_AusfallBremse & v.V_AusfallZugFunkModul
LTLSPEC !((v.V_AusfallHodometer = L_Nein & 
		v.V_AusfallMotor = L_Nein & v.V_AusfallSchrankeGeschlossen = L_Nein
		& v.V_AusfallZugSensor = L_Nein) U (Hazard))